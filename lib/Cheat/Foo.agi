#=author  =  Copyright 2010 Xiong Changnian <xiong@cpan.org>   =
#=license = Free Software = Artistic License 2.0 = NO WARRANTY =
#=package Cheat::Test
#=tagline Usage for Test::* modules
#=quote 
    The test itself is a cheat, isn't it?
    I mean you program it to be unwinnable.
    --James Tiberius Kirk

#-#========================================================================#-#
#-#=====# # FOO MODULES
#-#                             # [<-44 cols to end                78 cols ->]
#-#                             # #2345678901234567890123456789012345678901234
#=head2 Test::Simple
use Test::Simple tests => 6;    # Basic utilities for writing tests
    ok( $bool, $name );                     # ok if $bool is true
    ok( $foo eq $bar, $name );              # ok if $foo eq $bar
## Test::Simple

#=head2 Test::More
use Test::More tests => 6;      # Standard framework for writing test scripts
    ok  ( $bool, $name );                   # ok if $bool is true
    is  ( $got, $want, $name );             # ok if $got eq $want
    isnt( $got, $want, $name );             # ok if $got ne $want
    like( $got, qr/./, $name );             # ok if $got =~ /regex/
## Test::More

#=head2 Test::Deep
use Test::Deep;                 # Extremely flexible deep comparison
    cmp_deeply( $got, $want, $name );   # ok if $got eq $want deeply
    # Special comparision functions for each value; may be nested
    my $cmp = {                     # check each $got->{key}        # $gv...
        key     => ignore(),            # ok regardless of $gv
    };
    cmp_deeply( $got, $cmp,  $name ); # ok if $got special $cmp deeply
## Test::Deep

__END__

#TODO: use Test::Exception tests => 6; # Test exception based code




#-#========================================================================#-#

