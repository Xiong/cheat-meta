package Cheat::Test;

## END MODULE
1;
#============================================================================#
__END__

=head1 NAME

Cheat::Test - Usage for Test::* modules

=head1 SYNOPSIS

    $ vim Cheat/Test.perl
    :syn on

=head1 DESCRIPTION

I<The test itself is a cheat, isn't it? I mean you program it to be unwinnable.> 
--James Tiberius Kirk

This is a collection of "cheat sheets": highly compressed, abbreviated 
documentation for various modules. Each module within the bundle covers a 
top-level namespace or a set of otherwise closely-related modules. 

For each module, a paragraph is given, generally: 

    Some::Module            # Short description
        qw( various exportable symbols if any );
        routine( $placeholder, @arguments );
        $context    = function( @arguments);
        $object->method();

You should be able to copy and paste this into your own code, 
delete what you don't need, and be on your way. 

=head1 CHEATS

=over

=item * L</ Test::Simple>

=item * L</ Test::More>

=item * L</ Test::Deep>

=back


=head2  Test::Simple

    use Test::Simple tests => 6;    # Basic utilities for writing tests
        ok( $bool, $name );                     # ok if $bool is true
        ok( $foo eq $bar, $name );              # ok if $foo eq $bar
    ## Test::Simple

=head2  Test::More

    use Test::More tests => 6;      # Standard framework for writing test scripts
        ok  ( $bool, $name );                   # ok if $bool is true
        is  ( $got, $want, $name );             # ok if $got eq $want
        isnt( $got, $want, $name );             # ok if $got ne $want
        like( $got, qr/./, $name );             # ok if $got =~ /regex/
    ## Test::More

=head2  Test::Deep

    use Test::Deep;                 # Extremely flexible deep comparison
        cmp_deeply( $got, $want, $name );   # ok if $got eq $want deeply
        # Special comparision functions for each value; may be nested
        my $cmp = {                     # check each $got->{key}        # $gv...
            key     => ignore(),            # ok regardless of $gv
        };
        cmp_deeply( $got, $cmp,  $name ); # ok if $got special $cmp deeply
    ## Test::Deep


=head1 SEE ALSO

=over

=item * L<perlcheat>

=item * L<Cheat::Meta>

=back

=head1 FUNCTIONS/METHODS

None. This module contains only POD. 

=head1 INTERFACE 

Open the cheat (the *.perl file) in your editor. 
Copy out whatever you like. 

If you look at the *.pm file, you'll see POD verbatim paragraphs.
Your choice. 

You can also get the same content in your pager with: 

    perldoc Cheat::Test

=head1 DEPENDENCIES

No dependencies. 

=head1 INCOMPATIBILITIES

None.

=head1 BUGS AND LIMITATIONS

No cheat sheet will teach you anything. It's only a reminder. You B<must> 
consult each module's own full documentation I<at least> before using it. 
I hope. 

This module does not contain magic to squirt code into your module. 
Copy and paste. 

No boilerplate code will work right away. Edit it to your needs. 

=head1 THANKS

=over

=item *

To about 8500 authors who have uploaded about 85,000 modules to the CPAN. 

=back

=head1 AUTHOR

Xiong Changnian  C<< <xiong@cpan.org> >>

=head1 LICENSE

Copyright (C) 2010 Xiong Changnian C<< <xiong@cpan.org> >>

This library and its contents are released under Artistic License 2.0:

L<http://www.opensource.org/licenses/artistic-license-2.0.php>

=cut
